import discord
from discord.ui import View, Button
import random
from asyncio import sleep
from ranking import add_rating_points  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º


class CleanerGameView(View):
    def __init__(self, user, channel, db_cursor, db_connection):
        super().__init__(timeout=None)
        self.user = user
        self.channel = channel
        self.db_cursor = db_cursor
        self.db_connection = db_connection
        self.score = 0
        self.time_left = 10
        self.game_active = False

    async def start_game(self, interaction):
        self.game_active = True
        self.time_left = 10
        self.score = 0
        self.update_buttons()
        await self.channel.send(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ –≤–∞—Å {self.time_left} —Å–µ–∫—É–Ω–¥.", view=self)
        while self.time_left > 0 and self.game_active:
            await sleep(1)
            self.time_left -= 1
            if self.time_left == 0:
                await self.end_game()

    def update_buttons(self):
        self.clear_items()
        poop_button_index = random.randint(0, 7)
        for i in range(8):
            if i == poop_button_index:
                self.add_item(CorrectButton(self))
            else:
                self.add_item(WrongButton(self))

    async def end_game(self):
        self.game_active = False
        earnings = self.score * 5

        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
        self.db_cursor.execute("UPDATE users SET money = money + ? WHERE id = ?", (earnings, self.user.id))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        self.db_cursor.execute("SELECT rating_point, rating_level FROM users WHERE id = ?", (self.user.id,))
        result = self.db_cursor.fetchone()
        if result:
            current_points, current_level = result
            new_points, new_level = add_rating_points(self.user.id, 20+(current_level*10), self.db_cursor, self.db_connection)

            while new_points >= 100 + (new_level * 20):
                new_points -= 100 + (new_level * 20)  # –í—ã—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                new_level += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω—è
                print(f"–ù–æ–≤—ã–µ –æ—á–∫–∏: {new_points}, –ù–æ–≤—ã–π –£—Ä–æ–≤–µ–Ω—å: {new_level} —É {self.user.name}")

                # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —Å—Ç–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã–º
                if new_points < 0:
                    new_points = 0
                    break

        else:
            new_points, new_level = 5, 0  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ

        self.db_connection.commit()

        await self.channel.send(
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –º–æ–Ω–µ—Ç, –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}."
        )
        print(
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {self.user.name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earnings} –º–æ–Ω–µ—Ç, –ø–æ–ª—É—á–∏–ª 1 –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {new_level}."
        )
        await self.channel.delete()


class CorrectButton(Button):
    def __init__(self, parent_view):
        super().__init__(style=discord.ButtonStyle.success, emoji="üí©")
        self.parent_view = parent_view

    async def callback(self, interaction):
        if interaction.user != self.view.user or not self.view.game_active:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        self.parent_view.score += 1
        self.parent_view.update_buttons()
        await interaction.response.edit_message(
            content=f"–°—á—ë—Ç: {self.view.score} | –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {self.view.time_left} —Å–µ–∫.", view=self.view)


class WrongButton(Button):
    def __init__(self, parent_view):
        super().__init__(style=discord.ButtonStyle.primary, emoji="üü¶")
        self.parent_view = parent_view

    async def callback(self, interaction):
        if interaction.user != self.view.user or not self.view.game_active:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        self.parent_view.time_left = 0
        await self.parent_view.end_game()


class StartGameButton(Button):
    def __init__(self, parent_view):
        super().__init__(style=discord.ButtonStyle.green, label="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
        self.parent_view = parent_view

    async def callback(self, interaction):
        if interaction.user != self.parent_view.user:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        await self.parent_view.start_game(interaction)


async def start_cleaner_job(user, guild, db_cursor, db_connection):
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    channel = await guild.create_text_channel(f"—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ {user.name}", overwrites=overwrites)
    view = CleanerGameView(user, channel, db_cursor, db_connection)
    view.add_item(StartGameButton(view))
    await channel.send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —É–±–æ—Ä—â–∏–∫–æ–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.", view=view)
