import sqlite3
from discord import Embed, Interaction

conn = sqlite3.connect(r"discord.db")
cur = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
market_db = sqlite3.connect("marketplace.db")
market_cur = market_db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
market_cur.execute("""
CREATE TABLE IF NOT EXISTS marketplace (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    seller_id INTEGER,
    card_id INTEGER,
    price INTEGER,
    FOREIGN KEY (card_id) REFERENCES cards(id)
)
""")
market_db.commit()

from discord.ui import View, Button
from discord import ButtonStyle, Interaction, Embed

class MarketView(View):
    def __init__(self, market_cur, card_cur):
        super().__init__(timeout=None)
        self.market_cur = market_cur
        self.card_cur = card_cur

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"
        self.refresh_button = Button(label="üîÑ", style=ButtonStyle.primary)
        self.refresh_button.callback = self.refresh_market
        self.add_item(self.refresh_button)

    async def send_market(self, interaction: Interaction):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π."""
        self.market_cur.execute("SELECT id, seller_id, card_id, price FROM marketplace")
        listings = self.market_cur.fetchall()

        embed = Embed(title="–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", color=0x00ff00)

        if not listings:
            embed.description = "–ù–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        else:
            for listing_id, seller_id, card_id, price in listings:
                self.card_cur.execute("SELECT name, rarity FROM cards WHERE id = ?", (card_id,))
                card_data = self.card_cur.fetchone()
                if card_data:
                    card_name, card_rarity = card_data
                    embed.add_field(
                        name=f"ID: {listing_id} - {card_name} ({card_rarity})",
                        value=f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <@{seller_id}>\n–¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç",
                        inline=False
                    )

        await interaction.response.send_message(embed=embed, view=self, ephemeral=True)

    async def refresh_market(self, interaction: Interaction):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        self.market_cur.execute("SELECT id, seller_id, card_id, price FROM marketplace")
        listings = self.market_cur.fetchall()

        embed = Embed(title="–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", color=0x00ff00)

        if not listings:
            embed.description = "–ù–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        else:
            for listing_id, seller_id, card_id, price in listings:
                self.card_cur.execute("SELECT name, rarity FROM cards WHERE id = ?", (card_id,))
                card_data = self.card_cur.fetchone()
                if card_data:
                    card_name, card_rarity = card_data
                    embed.add_field(
                        name=f"ID: {listing_id} - {card_name} ({card_rarity})",
                        value=f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <@{seller_id}>\n–¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç",
                        inline=False
                    )

        await interaction.response.edit_message(embed=embed, view=self)


async def add_to_market(interaction: Interaction, seller_id: int, card_name: str, price: int, card_cur: sqlite3.Cursor):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ –∏–º–µ–Ω–∏."""
    card_cur.execute("SELECT id FROM cards WHERE name = ?", (card_name,))
    card = card_cur.fetchone()

    if not card:
        await interaction.response.send_message("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
        return

    card_id = card[0]
    card_cur.execute("SELECT * FROM player_cards WHERE player_id = ? AND card_id = ?", (seller_id, card_id))
    if not card_cur.fetchone():
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    market_cur.execute("SELECT * FROM marketplace WHERE seller_id = ? AND card_id = ?", (seller_id, card_id))
    if market_cur.fetchone():
        await interaction.response.send_message("–í—ã —É–∂–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.", ephemeral=True)
        return

    market_cur.execute("INSERT INTO marketplace (seller_id, card_id, price) VALUES (?, ?, ?)", (seller_id, card_id, price))
    market_db.commit()
    await interaction.response.send_message("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!", ephemeral=True)



async def buy_card(interaction, buyer_id, listing_id, buyer_balance, card_cur, market_cur, market_db):
    """–ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    market_cur.execute("SELECT seller_id, card_id, price FROM marketplace WHERE id = ?", (listing_id,))
    listing = market_cur.fetchone()

    if not listing:
        await interaction.response.send_message("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ.", ephemeral=True)
        return

    seller_id, card_id, price = listing

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –º–æ–Ω–µ—Ç
    if buyer_balance < price:
        await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {price} –º–æ–Ω–µ—Ç.", ephemeral=True)
        return

    card_cur.execute("SELECT * FROM player_cards WHERE player_id = ? AND card_id = ?", (buyer_id, card_id))
    if card_cur.fetchone():
        await interaction.response.send_message("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞. –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞
    card_cur.execute("SELECT name, rarity FROM cards WHERE id = ?", (card_id,))
    card_data = card_cur.fetchone()

    if not card_data:
        await interaction.response.send_message("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
        return

    card_name, card_rarity = card_data

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    card_cur.execute("INSERT INTO player_cards (player_id, card_id) VALUES (?, ?)", (buyer_id, card_id))
    card_cur.execute("DELETE FROM player_cards WHERE player_id = ? AND card_id = ?", (seller_id, card_id))

    # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    new_balance = buyer_balance - price
    cur.execute("UPDATE users SET money = ? WHERE id = ?", (new_balance, buyer_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
    cur.execute("SELECT money FROM users WHERE id = ?", (seller_id,))
    seller_data = cur.fetchone()

    if not seller_data:
        await interaction.response.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", ephemeral=True)
        return

    seller_balance = seller_data[0]
    new_seller_balance = seller_balance + price
    cur.execute("UPDATE users SET money = ? WHERE id = ?", (new_seller_balance, seller_id))
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞

    # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    market_cur.execute("DELETE FROM marketplace WHERE id = ?", (listing_id,))
    market_db.commit()

    await interaction.response.send_message(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É {card_name} ({card_rarity}) —É <@{seller_id}> –∑–∞ {price} –º–æ–Ω–µ—Ç!", ephemeral=True)
